{{- if .Values.hooks.postInstall.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "jupyterhub.fullname" . }}-post-install
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
    app.kubernetes.io/component: post-install-hook
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      name: {{ include "jupyterhub.fullname" . }}-post-install
      labels:
        {{- include "jupyterhub.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: post-install-hook
    spec:
      restartPolicy: Never
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "jupyterhub.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.jupyterhub.securityContext | nindent 8 }}
      containers:
      - name: post-install-validation
        image: "{{ .Values.hooks.postInstall.image.repository }}:{{ .Values.hooks.postInstall.image.tag }}"
        imagePullPolicy: {{ .Values.hooks.postInstall.image.pullPolicy }}
        env:
        - name: SERVICE_NAME
          value: {{ include "jupyterhub.fullname" . }}
        - name: SERVICE_PORT 
          value: "{{ .Values.jupyterhub.service.port }}"
        command:
          - /bin/bash
          - -c
          - |
            set -e
            echo "Starting post-install validation..."
            
            # Wait for JupyterHub service to be ready
            echo "Waiting for JupyterHub service to be ready..."
            
            
            for i in {1..30}; do
              if wget --spider --timeout=10 "http://${SERVICE_NAME}:${SERVICE_PORT}/hub/health" 2>/dev/null; then
                echo "JupyterHub service is ready!"
                break
              elif [ $i -eq 30 ]; then
                echo "Timeout waiting for JupyterHub service"
                exit 1
              else
                echo "Attempt $i: JupyterHub service not ready yet, waiting..."
                sleep 10
              fi
            done
            
            # Validate volume mounts and permissions
            {{- if .Values.persistence.dataVolume.enabled }}
            echo "Validating data volume..."
            if [ -d "{{ .Values.persistence.dataVolume.mountPath }}" ]; then
              echo "✓ Data volume is mounted at {{ .Values.persistence.dataVolume.mountPath }}"
              ls -la {{ .Values.persistence.dataVolume.mountPath }}
            else
              echo "✗ Data volume not found at {{ .Values.persistence.dataVolume.mountPath }}"
              exit 1
            fi
            {{- end }}
            
            {{- if .Values.persistence.notebookVolume.enabled }}
            echo "Validating notebook volume..."
            if [ -d "{{ .Values.persistence.notebookVolume.mountPath }}" ]; then
              echo "✓ Notebook volume is mounted at {{ .Values.persistence.notebookVolume.mountPath }}"
              ls -la {{ .Values.persistence.notebookVolume.mountPath }}
            else
              echo "✗ Notebook volume not found at {{ .Values.persistence.notebookVolume.mountPath }}"
              exit 1
            fi
            {{- end }}
            
            # Create status report
            echo "Creating deployment status report..."
            cat > {{ .Values.persistence.notebookVolume.mountPath }}/DEPLOYMENT_STATUS.md << 'EOF'
            # JupyterHub Deployment Status
            
            **Deployment Time:** $(date)
            **Chart Version:** {{ .Chart.Version }}
            **App Version:** {{ .Chart.AppVersion }}
            **Release Name:** {{ .Release.Name }}
            **Namespace:** {{ .Release.Namespace }}
            
            ## Configuration Summary
            
            - **Replica Count:** {{ .Values.jupyterhub.replicaCount }}
            - **Image:** {{ .Values.jupyterhub.image.repository }}:{{ .Values.jupyterhub.image.tag | default .Chart.AppVersion }}
            - **Service Type:** {{ .Values.jupyterhub.service.type }}
            - **Service Port:** {{ .Values.jupyterhub.service.port }}
            
            ## Storage Configuration
            
            {{- if .Values.persistence.dataVolume.enabled }}
            - **Data Volume:** {{ .Values.persistence.dataVolume.size }} at {{ .Values.persistence.dataVolume.mountPath }}
            {{- end }}
            {{- if .Values.persistence.notebookVolume.enabled }}
            - **Notebook Volume:** {{ .Values.persistence.notebookVolume.size }} at {{ .Values.persistence.notebookVolume.mountPath }}
            {{- end }}
            
            ## Authentication
            
            - **Type:** {{ .Values.jupyterhub.auth.type }}
            {{- if eq .Values.jupyterhub.auth.type "dummy" }}
            - **Username:** Any username
            - **Password:** {{ .Values.jupyterhub.auth.dummy.password }}
            {{- end }}
            
            ## Health Checks
            
            {{- if .Values.healthChecks.enabled }}
            - **Health Checks:** Enabled
            - **Health Endpoint:** /hub/health
            {{- else }}
            - **Health Checks:** Disabled
            {{- end }}
            
            ## Access Information
            
            {{- if .Values.ingress.enabled }}
            {{- range .Values.ingress.hosts }}
            - **External URL:** http{{ if $.Values.ingress.tls }}s{{ end }}://{{ .host }}
            {{- end }}
            {{- else }}
            - **Internal Service:** {{ include "jupyterhub.fullname" . }}:{{ .Values.jupyterhub.service.port }}
            - **Port Forward Command:** `kubectl port-forward service/{{ include "jupyterhub.fullname" . }} 8080:{{ .Values.jupyterhub.service.port }}`
            {{- end }}
            
            ## Validation Results
            
            ✓ JupyterHub service is responding
            {{- if .Values.persistence.dataVolume.enabled }}
            ✓ Data volume is accessible
            {{- end }}
            {{- if .Values.persistence.notebookVolume.enabled }}
            ✓ Notebook volume is accessible
            {{- end }}
            ✓ Post-install validation completed successfully
            
            ---
            *Generated by CMCC JupyterHub Helm Chart post-install hook*
            EOF
            
            echo "Post-install validation completed successfully!"
        volumeMounts:
        {{- if .Values.persistence.dataVolume.enabled }}
        - name: data-volume
          mountPath: {{ .Values.persistence.dataVolume.mountPath }}
          readOnly: true
        {{- end }}
        {{- if .Values.persistence.notebookVolume.enabled }}
        - name: notebook-volume
          mountPath: {{ .Values.persistence.notebookVolume.mountPath }}
        {{- end }}
        resources:
          {{- toYaml .Values.hooks.postInstall.resources | nindent 10 }}
      volumes:
      {{- if .Values.persistence.dataVolume.enabled }}
      - name: data-volume
        persistentVolumeClaim:
          claimName: {{ include "jupyterhub.dataVolumeName" . }}
      {{- end }}
      {{- if .Values.persistence.notebookVolume.enabled }}
      - name: notebook-volume
        persistentVolumeClaim:
          claimName: {{ include "jupyterhub.notebookVolumeName" . }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}

